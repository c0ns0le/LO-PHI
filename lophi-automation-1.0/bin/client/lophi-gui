#!/usr/bin/python
"""
    Open a GUI listener.
    This will open a RabbitMQ server and consumme output from the sensors and
    display it in a nice gui.

    (c) 2015 Massachusetts Institute of Technology
"""
# Native
import sys
import os
import multiprocessing
import optparse
import logging
logger = logging.getLogger(__name__)

# 3rd Party
import wx

# LO-PHI
import lophi.globals as G

# LO-PHI Automation
from lophi_automation.dataconsumers.gui import LoPhiGUI
from lophi_automation.dataconsumers.gui import NewFrameEvent
from lophi_automation.ext_interface.rabbitmq import LOPHI_RabbitMQ_Consumer
import lophi_automation.protobuf.helper as protobuf

def main(options):
    """ Main function, parses args """

    input_queue = multiprocessing.Queue()
    amqp_server = LOPHI_RabbitMQ_Consumer(options.amqp_host,
                                          input_queue,
                                          G.RabbitMQ.SENSOR+".gui",
                                          exchange_type=G.RabbitMQ.TYPE_FANOUT,
                                          routing_key='',
                                          exchange=G.RabbitMQ.EXCHANGE_FANOUT)
    amqp_server.start()

    ## Start GUI Thread
    LOPHI_GUI = LoPhiGUI()
    LOPHI_GUI.start()

    queues = {}
    while True:
        # Read Sensor input
        sensor_input = input_queue.get()
        try:
            sensor_unpacked = protobuf.unpack_sensor_output(sensor_input)
        except:
            logger.warn("Got invalid protocol buffer data.")
            continue

        # Send the data to the appropriate queue
        machine_name = sensor_unpacked['MACHINE']
        if machine_name not in queues:
            if G.VERBOSE:
                print "* Creating new frame for %s" % machine_name
            queues[machine_name] = multiprocessing.Queue()
            # New frame
            wx.PostEvent(LOPHI_GUI, NewFrameEvent(queues[machine_name], machine_name))

        queues[machine_name].put(sensor_unpacked)
    #
    ## Close frame
    #wx.PostEvent(self.LOPHI_GUI,
    #CloseFrameEvent(ac.lophi_config,
    #              ac.machine.config))


if __name__ == "__main__":
    opts = optparse.OptionParser()

    opts.add_option("-a", "--amqp_host", action="store", type="string",
                    dest="amqp_host", default=G.RabbitMQ.AMQP_HOST,
                    help="AMQP server to connect to. (default: localhost)")


    opts.add_option("-k", "--amqp_key", action="store", type="string",
                    dest="amqp_key", default='#',
                    help="AMQP key to display, i.e. the name of the machine or some wildcards.  [# is zero or more words, * is exactly 1 word.  Ref: http://www.rabbitmq.com/tutorials/tutorial-five-python.html]  (default: #)")

    opts.add_option("-d", "--debug", action="store_true",
        dest="debug", default=False,
        help="Enable DEBUG")

    
    (options, positionals) = opts.parse_args(None)
    
    # Get our log level
    if options.debug:
        logger.setLevel(logging.DEBUG)
    else:
        logging.basicConfig()
        
    main(options)
