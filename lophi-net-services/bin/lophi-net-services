#!/usr/bin/python
"""
   This program will start a DHCP server and a TFTP server used for PXE booting.
   
    (c) 2015 Massachusetts Institute of Technology
"""
# Native

import logging
import multiprocessing
import sys
import os
import time
logger = logging.getLogger(__name__)

from lophinet.pybootd.tftpd import TftpServer
from lophinet.aclserver import ACLServer
from lophinet.proxydhcpd.dhcpd import DHCPD
from lophinet.dns import DNSServer

import lophinet.globals as G


def main(options):
    """
    
        @TODO: Add check to ensure the MTU is 1500!
        @TODO: Could also have an IP to MAC mapping for faster lookups
    """
    
    def close_all(self,exit):
        print "Terminating processes!!!"
        acl_server.terminate()
        tftpd_server.terminate()
        dhcpd_server.terminate()
        dns_server.terminate()
        sys.exit(0)
#         acl_server.join()
#         tftpd_server.join()
#         dhcpd_server.join()
        
    # Get our IP out of the config
    import ConfigParser
    cfg = ConfigParser.ConfigParser()
    cfg.read(options.config)
    
    if cfg.has_section("proxy"):
        pxe_ip = cfg.get("proxy","listen_address")
    else:
        pxe_ip = None
        logger.error("No PXE listen address set.")
        
        
    # Setup our shared dictionaries
    manager = multiprocessing.Manager()
    ACL = manager.dict()
    MAC_MAPPING = manager.dict()
    MAC_TO_PXE_CONF = manager.dict()
    DNS_LOOKUP_TABLE = manager.dict()
    
    if pxe_ip is not None:
        DNS_LOOKUP_TABLE['lophi-pxe.'] = pxe_ip
        
    # Start our ACL server
    print "* Starting ACL Manger..."
    acl_server = ACLServer(ACL, MAC_MAPPING, MAC_TO_PXE_CONF)
    acl_server.start()
    
    # Start our TFTP Server
    print "* Starting TFTP Server..."
    tftpd_server = TftpServer(options.config,
                              mac_to_ip=MAC_MAPPING,
                              mac_to_pxe_conf=MAC_TO_PXE_CONF)
    tftpd_server.start()
    
    # Start our PXE/DHCP Server
    print "* Starting DHCP/PXE Server..."
    dhcpd_server = DHCPD(options.config,
                         shared_acl=ACL,
                         shared_map=MAC_MAPPING)
    dhcpd_server.start()
    
    # Start our DNS Server
    print "* Starting DNS Server..."
    dns_server = DNSServer(DNS_LOOKUP_TABLE)
    dns_server.start()
    
    import signal
    signal.signal(signal.SIGINT, close_all)
    
    # Wait forever
    while True:
        time.sleep(1)
    
if __name__ == "__main__":
    
    # Must be root to bind to these ports
    if os.geteuid() != 0:
        print "You must be root to run the proxy"
        sys.exit(1)
                 
    import optparse
    opts = optparse.OptionParser()
    
    # Config file
    default_conf = os.path.join(G.DIR_ROOT, G.DIR_CONFIG,G.CONFIG_NETWORK)
    opts.add_option('-c', '--config', dest='config',
                        default=default_conf,
                        help='Configuration file. (Default: %s)'%default_conf)
     # Debug?
    opts.add_option("-d", "--debug", action="store_true", 
       dest="debug", default=False,
       help="Turn on debugging output. (Default: False)")
    
    (options, positionals) = opts.parse_args(None)
    
    if options.debug:
       print "** Log level set to DEBUG."
       logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig()
        
    if not os.path.exists(options.config):
        logger.error("Config file (%s) does not exist!"%options.config)
        opts.print_help()
        sys.exit(0)
        
    main(options)